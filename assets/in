#!/bin/sh

set -e
#set -x


exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH


payload=$(mktemp $TMPDIR/openjdk-resource-in-request.XXXXXX)

# putting things you get from stdin to payload
cat > ${payload} <&0

jdk_type=$(jq -r '.source.type // "jdk"' < ${payload})
jdk_arch=$(jq -r '.source.arch // "x64"' < ${payload})
jdk_platform=$(jq -r '.source.platform // "linux"' < ${payload})
version=$(jq -r '.version.version // ""' < ${payload})
fetch_tarball=$(jq -r '.params.tarball != false' < ${payload})
output_name=$(jq -r '.params.output_name // "openjdk.tar.gz"' < ${payload})

if [ -z "$version" ]; then
  echo "ERROR - must specify version. Payload: $(cat ${payload})"
  exit 1
fi

mkdir -p ${destination}

download_url=$(curl --retry 5 -L -s -f https://jdk8.java.net/download.html|grep ${jdk_platform} |grep "binaries/${jdk_type}" | grep ${jdk_arch} |grep tar.gz|cut -d'=' -f2|cut -d'"' -f2)
echo "Extracted url: ${download_url}"

detected_version=$(echo ${download_url}| awk -F'[/]' '{print $5}')

echo "Detected version: ${detected_version}"

if [ "${detected_version}" != "${version}" ]
then
    echo "ERROR - Detected version (${detected_version}) does not match 'in version' (${version})"
    echo "ERROR - Payload: $(cat ${payload})"
    exit 1
fi

echo "$download_url" > ${destination}/url
echo "$version" > ${destination}/version

if [ "$fetch_tarball" = "true" ]; then
  curl --retry 5 --fail -L "$download_url" -o ${destination}/${output_name}
fi

jq -n '{
  version: {
    version: $version
  },
  metadata: [
    {name: "url", value: $url}
  ]
}' --arg version "$version" --arg url "$download_url" >&3

#set +x