#!/bin/sh

set -e

set -x

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# for jq
PATH=/usr/local/bin:$PATH


payload=$(mktemp -t $TMPDIR/openjdk-resource-request.XXXXXX)

# putting things you get from stdin to payload
cat > ${payload} <&0

arch=$(jq -r '.source.repository // ""' < ${payload})
platform=$(jq -r '.source.platform // ""' < ${payload})
current_version=$(jq -r '.version.version // ""' < ${payload})

if [ -z "$arch" ]; then
  arch="x64"
fi

if [ -z "$platform" ]; then
  platform="linux"
fi



raw_html=$(mktemp -t $TMPDIR/openjdk-resource-html.XXXXXX)

if [ -z "${current_version}" ]; then
  echo "First execution, no current version detected. Using latest..."
fi

curl --retry 5 -L -s -f https://jdk8.java.net/download.html -o ${raw_html}

#JDK_URL=http://www.java.net/download/jdk8u76/archive/b04/binaries/jdk-8u76-ea-bin-b04-linux-x64-25_jan_2016.tar.gz
jdk_url=$(echo "${raw_html}" |grep ${platform} |grep "binaries/jdk" | grep ${arch} |grep tar.gz|cut -d'=' -f2|cut -d'"' -f2)
echo "Cheking url: ${jdk_url}"

version=$(echo ${jdk_url}| awk -F'[/]' '{print $NF}'| awk -F'.' '{print $1}')
echo "version found: ${version}"

if [ "${version}" != "${current_version}" ]
then
    echo "New version detected (previous: ${current_version})"
    jq -n '[{"version": "$version"}]' --arg version "$version"  >&3
else
    jq -n '[]' >&3
fi

set +x